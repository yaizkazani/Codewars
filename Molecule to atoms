# Description:
# 
# For a given chemical formula represented by a string, count the number of atoms of each element contained in the molecule and return an object (associative array in PHP, Dictionary<string, int> in C#, Map<String,Integer> in Java).
# 
# For example:
# 
# water = 'H2O'
# parse_molecule(water)                 # return {H: 2, O: 1}
# 
# magnesium_hydroxide = 'Mg(OH)2'
# parse_molecule(magnesium_hydroxide)   # return {Mg: 1, O: 2, H: 2}
# 
# var fremy_salt = 'K4[ON(SO3)2]2'
# parse_molecule(fremySalt)             # return {K: 4, O: 14, N: 2, S: 4}
# 
# As you can see, some formulas have brackets in them. The index outside the brackets tells you that you have to multiply count of each atom inside the bracket on this index. For example, in Fe(NO3)2 you have one iron atom, two nitrogen atoms and six oxygen atoms.
# 
# Note that brackets may be round, square or curly and can also be nested. Index after the braces is optional.


def parse_molecule(formula):
	"""Parse molecule's formula to count atoms it made of"""
	import re
	count = dict()  # dictionary used to count atoms
	formula = formula.replace("[", "(").replace("{", "(").replace("]", ")").replace("}",
	                                                                                ")")  # we don't care much for formula rules - just make brackets single type
	for _ in range(formula.count(
			"(")):  # loop to process all the bracketed atoms - we need to process it x times where x is number of bracketed elements
		left, right = nested_brackets(formula)  # we call our function to find most nested bracketed atoms
		if formula[right + 1: right + 2].isdigit():  # if next symbol to our bracketed atoms is digit (i.e. (NO3)2)
			if formula[right + 2: right + 3].isdigit():
				formula = formula[:left] + formula[left + 1:right] * int(formula[right + 1: right + 3]) + formula[right + 3:]
			else:
				formula = formula[:left] + formula[left + 1:right] * int(formula[right + 1: right + 2]) + formula[
				                                                                                          right + 2:]  # we multiply bracketed stuff that many times (i.e. NO3 * 2 = NO3NO3)
		else:
			formula = formula[:left] + formula[left + 1:right] + formula[right + 1:]  # if not - we just remove brackets
	list = re.findall("[A-Z][a-z]?|\d",
	                  formula)  # we make a list from our formula looking like this['A', 'B', '3', 'C', 'Dd', '4'] - we know that some atoms names are 2 digits, some not
	for i in range(len(list) - 1):  # this one to process pre-final formula form which looks like this ↑
		if list[i + 1].isdigit():  # if some element is a number we multiply previous element that many times, i.e ['A', '2'] => ['AA', '2']
			if i < len(list) - 2 and list[i + 2].isdigit():  # some numbers has 2 digits... so we have to check this
				list[i] = str(list[i]) * int("".join([list[i + 1], list[i + 2]]))  # we multiply on 2 digit number
			else:
				list[i] = str(list[i]) * int(list[i + 1])  # we multiply to 1 digit number
	formula = "".join([i for i in list if i.isalpha()])  # we make it string, throw away all digits i.e. not .isalpha()
	list = re.findall("[A-z][a-z]?",
	                  formula)  # we transform our list, preparing to count it ['KKKK', '4', 'O', 'N', 'S', 'OOO'...] => ['K', 'K', 'K', 'K', 'O', 'N', 'S', 'O', 'O', 'O'...]
	for i in list:  # we go through the list, counting elements using dictionary
		count[i] = count.get(i, 0) + 1
	return count


def nested_brackets(formula):
	"""Trying to find most nested bracketed substring start and end indexes"""
	left = formula.find("(")  # we find most left placed bracket
	right = formula.rfind(")")  # we find most right placed bracket
	while True:  # we loop this until we get into the most nested bracketed substring ↓
		if formula.find("(", left + 1,
		                right) != -1:  # if we find that there are more left brackets in our substring that means that our target left bracket is not closed by current right bracket i.e ...((abcd)...
			left = formula.find("(",
			                    left + 1)  # so this left bracket that we've found is a new left bracket for us ! (mb not last lol) meaning that we have ...(abcd)...
		elif formula.rfind(")", left,
		                   right) != -1:  # same for right bracket - if we know that there are more right brackets to the left of our current one
			right = formula.rfind(")", left, right)  # we switch to it
		else:
			return left, right  # no more left and right brackets = we are in the most nested substring
