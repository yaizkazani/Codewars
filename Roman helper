def convert_roman(i):
	"""If decimal number is passed - return Roman number
	   If Roman number passed - return decimal number"""
	values = {1: "I",
	          2: "II",
	          3: "III",
	          4: "IV",
	          5: "V",
	          6: "VI",
	          7: "VII",
	          8: "VIII",
	          9: "IX",
	          10: "X",
	          40: "XL",
	          50: "L",
	          90: "XC",
	          100: "C",
	          400: "CD",
	          500: "D",
	          900: "CM",
	          1000: "M",
	          }
	rvalues = {"I": 1,
	           "II": 2,
	           "III": 3,
	           "IV": 4,
	           "V": 5,
	           "VI": 6,
	           "VII": 7,
	           "VIII": 8,
	           "IX": 9,
	           "X": 10,
	           "XL": 40,
	           "L": 50,
	           "XC": 90,
	           "C": 100,
	           "CD": 400,
	           "D": 500,
	           "CM": 900,
	           "M": 1000
	           }

	if str(i).isdigit():
		ret = []
		while i > 0:
			key = max(x for x in values.keys() if x <= i)
			i = i - key
			ret.append(values[key])
		return "".join(ret)

	elif str(i).isalpha():
		return rvalues[i]


class RomanNumerals:

	def __init__(self):
		"""we don't need any class exemplars"""
		pass

	@staticmethod
	def to_roman(num):
		"""convert number to Roman"""
		roman = []
		digits = [i for i in str(num) if i.isdigit()]
		k = len(digits) - 1
		for i in digits:
			i = int(i) * (10 ** k)
			roman.append(convert_roman(i))
			k -= 1
		return "".join(roman)

	@staticmethod
	def from_roman(roman):
		decimal = 0
		digits = [j for j in str(roman) if j in ["I", "V", "X", "L", "C", "D", "M"]]
		for k in range(len(digits)):
			decimal += convert_roman(digits[k])
			if k > 0 and convert_roman(digits[k - 1]) < convert_roman(digits[k]):
				decimal -= convert_roman(digits[k - 1]) * 2
		return decimal


print(RomanNumerals.to_roman(98))
print(RomanNumerals.from_roman("XCVIII"))
