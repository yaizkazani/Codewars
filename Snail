# array = [[1,2,3],
#          [4,5,6],
#          [7,8,9]]
# snail(array) #=> [1,2,3,6,9,8,7,4,5]


def in_borders(n, i, j):
    """Check coordinates of the next move target if its in our matrix' borders"""
    return 0 <= i < n and 0 <= j < n


def snail(snail_map):
    if not snail_map:
        return [[]]
    moves = ["1, 0",  # right
            "0, 1",  # down
            "-1, 0",  # left
            "0, -1"]  # up
    ans = ""
    dir, delta_i, delta_j, i, j = 0, 0, 0, 0, 0
    n = len(snail_map[0])
    max = n ** 2
    while True:
        target_i, target_j = i + delta_i, j + delta_j
        if in_borders(n, target_i, target_j):
            if snail_map[j + delta_j][i + delta_i] != 0:
                i += delta_i
                j += delta_j
                ans += str(snail_map[j][i]) + " "
                snail_map[j][i] = 0
                if len(ans) == max * 2:
                    return list(map(int, ans.split()))
            else:
                dir += 1
        else:
            dir += 1
        direction = moves[dir % 4]
        delta_i = int(direction.split(",")[0])
        delta_j = int(direction.split(",")[1])
